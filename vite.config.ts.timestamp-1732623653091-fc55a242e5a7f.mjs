// vite.config.ts
import { defineConfig } from "file:///Users/guo/OSS/japanese-ebma-receipt-transformer/node_modules/.pnpm/vite@5.4.11_@types+node@22.9.1/node_modules/vite/dist/node/index.js";
import react from "file:///Users/guo/OSS/japanese-ebma-receipt-transformer/node_modules/.pnpm/@vitejs+plugin-react@4.3.3_vite@5.4.11_@types+node@22.9.1_/node_modules/@vitejs/plugin-react/dist/index.mjs";

// package.json
var name = "react-pdf-transformer";
var peerDependencies = {
  react: "^18.3.1",
  "react-dom": "^18.3.1"
};

// vite.config.ts
import path from "path";
import dts from "file:///Users/guo/OSS/japanese-ebma-receipt-transformer/node_modules/.pnpm/vite-plugin-dts@4.3.0_@types+node@22.9.1_rollup@4.27.3_typescript@5.6.3_vite@5.4.11_@types+node@22.9.1_/node_modules/vite-plugin-dts/dist/index.mjs";
var __vite_injected_original_dirname = "/Users/guo/OSS/japanese-ebma-receipt-transformer";
function transformPdfJsWorker() {
  return {
    name: "transform-pdf-js-worker",
    generateBundle(options, bundle) {
      for (const [fileName, chunkOrAsset] of Object.entries(bundle)) {
        if (!fileName.includes("pdf.worker") || chunkOrAsset.type !== "asset") {
          continue;
        }
        const prepend = Buffer.from(
          `if (typeof Promise.withResolvers === "undefined") {
            Promise.withResolvers = function () {
              let resolve, reject
              const promise = new Promise((res, rej) => {
                resolve = res
                reject = rej
              })
              return { promise, resolve, reject }
            }
          }
          `,
          "utf-8"
        );
        const sourceBuffer = Buffer.isBuffer(chunkOrAsset.source) ? chunkOrAsset.source : Buffer.from(chunkOrAsset.source);
        chunkOrAsset.source = Buffer.concat([prepend, sourceBuffer]);
      }
    }
  };
}
var vite_config_default = defineConfig({
  plugins: [
    react(),
    transformPdfJsWorker(),
    dts({
      rollupTypes: true,
      tsconfigPath: "./tsconfig.app.json",
      exclude: ["**/*.stories.ts", "**/*.test.ts"]
    })
  ],
  optimizeDeps: {
    exclude: ["lucide-react"]
  },
  resolve: {
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./src")
    }
  },
  build: {
    sourcemap: true,
    emptyOutDir: true,
    lib: {
      entry: "./src/index.ts",
      name,
      fileName: (format) => `index.${format}.js`,
      formats: ["es", "cjs", "umd"]
    },
    rollupOptions: {
      external: Object.keys(peerDependencies),
      output: { globals: { react: "React", "react-dom": "ReactDOM" } }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsidml0ZS5jb25maWcudHMiLCAicGFja2FnZS5qc29uIl0sCiAgInNvdXJjZXNDb250ZW50IjogWyJjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfZGlybmFtZSA9IFwiL1VzZXJzL2d1by9PU1MvamFwYW5lc2UtZWJtYS1yZWNlaXB0LXRyYW5zZm9ybWVyXCI7Y29uc3QgX192aXRlX2luamVjdGVkX29yaWdpbmFsX2ZpbGVuYW1lID0gXCIvVXNlcnMvZ3VvL09TUy9qYXBhbmVzZS1lYm1hLXJlY2VpcHQtdHJhbnNmb3JtZXIvdml0ZS5jb25maWcudHNcIjtjb25zdCBfX3ZpdGVfaW5qZWN0ZWRfb3JpZ2luYWxfaW1wb3J0X21ldGFfdXJsID0gXCJmaWxlOi8vL1VzZXJzL2d1by9PU1MvamFwYW5lc2UtZWJtYS1yZWNlaXB0LXRyYW5zZm9ybWVyL3ZpdGUuY29uZmlnLnRzXCI7aW1wb3J0IHsgZGVmaW5lQ29uZmlnLCBQbHVnaW4gfSBmcm9tIFwidml0ZVwiO1xuaW1wb3J0IHJlYWN0IGZyb20gXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiO1xuaW1wb3J0IHsgcGVlckRlcGVuZGVuY2llcywgbmFtZSB9IGZyb20gXCIuL3BhY2thZ2UuanNvblwiO1xuXG5pbXBvcnQgcGF0aCBmcm9tIFwicGF0aFwiO1xuaW1wb3J0IGR0cyBmcm9tIFwidml0ZS1wbHVnaW4tZHRzXCI7XG5mdW5jdGlvbiB0cmFuc2Zvcm1QZGZKc1dvcmtlcigpOiBQbHVnaW4ge1xuICByZXR1cm4ge1xuICAgIG5hbWU6IFwidHJhbnNmb3JtLXBkZi1qcy13b3JrZXJcIixcbiAgICBnZW5lcmF0ZUJ1bmRsZShvcHRpb25zLCBidW5kbGUpIHtcbiAgICAgIGZvciAoY29uc3QgW2ZpbGVOYW1lLCBjaHVua09yQXNzZXRdIG9mIE9iamVjdC5lbnRyaWVzKGJ1bmRsZSkpIHtcbiAgICAgICAgaWYgKCFmaWxlTmFtZS5pbmNsdWRlcyhcInBkZi53b3JrZXJcIikgfHwgY2h1bmtPckFzc2V0LnR5cGUgIT09IFwiYXNzZXRcIikge1xuICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IHByZXBlbmQgPSBCdWZmZXIuZnJvbShcbiAgICAgICAgICBgaWYgKHR5cGVvZiBQcm9taXNlLndpdGhSZXNvbHZlcnMgPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICAgIFByb21pc2Uud2l0aFJlc29sdmVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgbGV0IHJlc29sdmUsIHJlamVjdFxuICAgICAgICAgICAgICBjb25zdCBwcm9taXNlID0gbmV3IFByb21pc2UoKHJlcywgcmVqKSA9PiB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSA9IHJlc1xuICAgICAgICAgICAgICAgIHJlamVjdCA9IHJlalxuICAgICAgICAgICAgICB9KVxuICAgICAgICAgICAgICByZXR1cm4geyBwcm9taXNlLCByZXNvbHZlLCByZWplY3QgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBgLFxuICAgICAgICAgIFwidXRmLThcIlxuICAgICAgICApO1xuICAgICAgICBjb25zdCBzb3VyY2VCdWZmZXIgPSBCdWZmZXIuaXNCdWZmZXIoY2h1bmtPckFzc2V0LnNvdXJjZSlcbiAgICAgICAgICA/IGNodW5rT3JBc3NldC5zb3VyY2VcbiAgICAgICAgICA6IEJ1ZmZlci5mcm9tKGNodW5rT3JBc3NldC5zb3VyY2UpO1xuICAgICAgICBjaHVua09yQXNzZXQuc291cmNlID0gQnVmZmVyLmNvbmNhdChbcHJlcGVuZCwgc291cmNlQnVmZmVyXSk7XG4gICAgICB9XG4gICAgfSxcbiAgfTtcbn1cblxuLy8gaHR0cHM6Ly92aXRlLmRldi9jb25maWcvXG5leHBvcnQgZGVmYXVsdCBkZWZpbmVDb25maWcoe1xuICBwbHVnaW5zOiBbXG4gICAgcmVhY3QoKSxcbiAgICB0cmFuc2Zvcm1QZGZKc1dvcmtlcigpLFxuICAgIGR0cyh7XG4gICAgICByb2xsdXBUeXBlczogdHJ1ZSxcbiAgICAgIHRzY29uZmlnUGF0aDogXCIuL3RzY29uZmlnLmFwcC5qc29uXCIsXG4gICAgICBleGNsdWRlOiBbXCIqKi8qLnN0b3JpZXMudHNcIiwgXCIqKi8qLnRlc3QudHNcIl0sXG4gICAgfSksXG4gIF0sXG4gIG9wdGltaXplRGVwczoge1xuICAgIGV4Y2x1ZGU6IFtcImx1Y2lkZS1yZWFjdFwiXSxcbiAgfSxcbiAgcmVzb2x2ZToge1xuICAgIGFsaWFzOiB7XG4gICAgICBcIkBcIjogcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgXCIuL3NyY1wiKSxcbiAgICB9LFxuICB9LFxuICBidWlsZDoge1xuICAgIHNvdXJjZW1hcDogdHJ1ZSxcbiAgICBlbXB0eU91dERpcjogdHJ1ZSxcbiAgICBsaWI6IHtcbiAgICAgIGVudHJ5OiBcIi4vc3JjL2luZGV4LnRzXCIsXG4gICAgICBuYW1lOiBuYW1lLFxuICAgICAgZmlsZU5hbWU6IChmb3JtYXQpID0+IGBpbmRleC4ke2Zvcm1hdH0uanNgLFxuICAgICAgZm9ybWF0czogW1wiZXNcIiwgXCJjanNcIiwgXCJ1bWRcIl0sXG4gICAgfSxcbiAgICByb2xsdXBPcHRpb25zOiB7XG4gICAgICBleHRlcm5hbDogT2JqZWN0LmtleXMocGVlckRlcGVuZGVuY2llcyksXG4gICAgICBvdXRwdXQ6IHsgZ2xvYmFsczogeyByZWFjdDogXCJSZWFjdFwiLCBcInJlYWN0LWRvbVwiOiBcIlJlYWN0RE9NXCIgfSB9LFxuICAgIH0sXG4gIH0sXG59KTtcbiIsICJ7XG4gIFwibmFtZVwiOiBcInJlYWN0LXBkZi10cmFuc2Zvcm1lclwiLFxuICBcInZlcnNpb25cIjogXCIwLjAuOVwiLFxuICBcInR5cGVcIjogXCJtb2R1bGVcIixcbiAgXCJ0eXBlc1wiOiBcImRpc3QvaW5kZXguZC50c1wiLFxuICBcImV4cG9ydHNcIjoge1xuICAgIFwiLlwiOiB7XG4gICAgICBcImltcG9ydFwiOiBcIi4vZGlzdC9pbmRleC5lcy5qc1wiLFxuICAgICAgXCJyZXF1aXJlXCI6IFwiLi9kaXN0L2luZGV4LnVtZC5qc1wiXG4gICAgfSxcbiAgICBcIi4vc3R5bGVzLmNzc1wiOiB7XG4gICAgICBcInJlcXVpcmVcIjogXCIuL2Rpc3Qvc3R5bGVzLmNzc1wiLFxuICAgICAgXCJkZWZhdWx0XCI6IFwiLi9kaXN0L3N0eWxlcy5jc3NcIlxuICAgIH1cbiAgfSxcbiAgXCJmaWxlc1wiOiBbXG4gICAgXCJkaXN0XCJcbiAgXSxcbiAgXCJzY3JpcHRzXCI6IHtcbiAgICBcImRldlwiOiBcInZpdGVcIixcbiAgICBcImJ1aWxkXCI6IFwidHNjICYmIHZpdGUgYnVpbGQgJiYgcG5wbSBydW4gYnVpbGQ6Y3NzXCIsXG4gICAgXCJidWlsZDpjc3NcIjogXCJ0YWlsd2luZGNzcyAtbSAtaSAuL3NyYy90YWlsd2luZC1lbnRyeS5jc3MgLW8gLi9kaXN0L3N0eWxlcy5jc3NcIixcbiAgICBcImxpbnRcIjogXCJlc2xpbnQgLiAtLWV4dCB0cyx0c3ggLS1yZXBvcnQtdW51c2VkLWRpc2FibGUtZGlyZWN0aXZlcyAtLW1heC13YXJuaW5ncyAwXCIsXG4gICAgXCJwcmV2aWV3XCI6IFwidml0ZSBwcmV2aWV3XCIsXG4gICAgXCJzdG9yeWJvb2tcIjogXCJjb25jdXJyZW50bHkgXFxcInBucG0gcnVuIHN0b3J5Ym9vazpjc3NcXFwiIFxcXCJzdG9yeWJvb2sgZGV2XFxcIlwiLFxuICAgIFwic3Rvcnlib29rOmNzc1wiOiBcInRhaWx3aW5kY3NzIC13IC1pIC4vc3JjL3RhaWx3aW5kLWVudHJ5LmNzcyAtbyAuL3NyYy9pbmRleC5jc3NcIixcbiAgICBcImJ1aWxkLXN0b3J5Ym9va1wiOiBcImNvbmN1cnJlbnRseSBcXFwicG5wbSBydW4gYnVpbGQtc3Rvcnlib29rOmNzc1xcXCIgXFxcInN0b3J5Ym9vayBidWlsZFxcXCJcIixcbiAgICBcImJ1aWxkLXN0b3J5Ym9vazpjc3NcIjogXCJ0YWlsd2luZGNzcyAtbSAtaSAuL3NyYy90YWlsd2luZC1lbnRyeS5jc3MgLW8gLi9zcmMvaW5kZXguY3NzXCIsXG4gICAgXCJwcmVwdWJsaXNoT25seVwiOiBcInBucG0gcnVuIGJ1aWxkXCIsXG4gICAgXCJ0ZXN0LWN0XCI6IFwicGxheXdyaWdodCB0ZXN0IC1jIHBsYXl3cmlnaHQtY3QuY29uZmlnLnRzXCJcbiAgfSxcbiAgXCJwZWVyRGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcInJlYWN0XCI6IFwiXjE4LjMuMVwiLFxuICAgIFwicmVhY3QtZG9tXCI6IFwiXjE4LjMuMVwiXG4gIH0sXG4gIFwiZGV2RGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkBjaHJvbWF0aWMtY29tL3N0b3J5Ym9va1wiOiBcIl4zLjIuMlwiLFxuICAgIFwiQGVzbGludC9qc1wiOiBcIl45LjEzLjBcIixcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tZXNzZW50aWFsc1wiOiBcIl44LjQuNFwiLFxuICAgIFwiQHN0b3J5Ym9vay9hZGRvbi1pbnRlcmFjdGlvbnNcIjogXCJeOC40LjRcIixcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tbGlua3NcIjogXCJeOC40LjRcIixcbiAgICBcIkBzdG9yeWJvb2svYWRkb24tb25ib2FyZGluZ1wiOiBcIl44LjQuNFwiLFxuICAgIFwiQHN0b3J5Ym9vay9ibG9ja3NcIjogXCJeOC40LjRcIixcbiAgICBcIkBzdG9yeWJvb2svbWFuYWdlci1hcGlcIjogXCJeOC40LjRcIixcbiAgICBcIkBzdG9yeWJvb2svcmVhY3RcIjogXCJeOC40LjRcIixcbiAgICBcIkBzdG9yeWJvb2svcmVhY3Qtdml0ZVwiOiBcIl44LjQuNFwiLFxuICAgIFwiQHN0b3J5Ym9vay90ZXN0XCI6IFwiXjguNC40XCIsXG4gICAgXCJAc3Rvcnlib29rL3RoZW1pbmdcIjogXCJeOC40LjRcIixcbiAgICBcIkB0eXBlcy9ub2RlXCI6IFwiXjIyLjkuMVwiLFxuICAgIFwiQHR5cGVzL3JlYWN0XCI6IFwiXjE4LjMuMTJcIixcbiAgICBcIkB0eXBlcy9yZWFjdC1kb21cIjogXCJeMTguMy4xXCIsXG4gICAgXCJAdml0ZWpzL3BsdWdpbi1yZWFjdFwiOiBcIl40LjMuM1wiLFxuICAgIFwiYXV0b3ByZWZpeGVyXCI6IFwiXjEwLjQuMjBcIixcbiAgICBcImNvbmN1cnJlbnRseVwiOiBcIl45LjEuMFwiLFxuICAgIFwiZXNsaW50XCI6IFwiXjkuMTMuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1ob29rc1wiOiBcIl41LjAuMFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1yZWFjdC1yZWZyZXNoXCI6IFwiXjAuNC4xNFwiLFxuICAgIFwiZXNsaW50LXBsdWdpbi1zdG9yeWJvb2tcIjogXCJeMC4xMS4xXCIsXG4gICAgXCJnbG9iYWxzXCI6IFwiXjE1LjExLjBcIixcbiAgICBcInBvc3Rjc3NcIjogXCJeOC40LjQ5XCIsXG4gICAgXCJzdG9yeWJvb2tcIjogXCJeOC40LjRcIixcbiAgICBcInRhaWx3aW5kY3NzXCI6IFwiXjMuNC4xNVwiLFxuICAgIFwidHlwZXNjcmlwdFwiOiBcIn41LjYuMlwiLFxuICAgIFwidHlwZXNjcmlwdC1lc2xpbnRcIjogXCJeOC4xMS4wXCIsXG4gICAgXCJ2aXRlXCI6IFwiXjUuNC4xMFwiLFxuICAgIFwidml0ZS1wbHVnaW4tZHRzXCI6IFwiXjQuMy4wXCJcbiAgfSxcbiAgXCJwYWNrYWdlTWFuYWdlclwiOiBcInBucG1AOS4xMi4yK3NoYTI1Ni4yZWY2ZTU0N2IwYjA3ZDg0MWQ2MDUyNDBkY2U0ZDYzNTY3NzgzMTE0OGNkMzBmNmQ1NjRiOGY0ZjkyOGY3M2QyXCIsXG4gIFwiZXNsaW50Q29uZmlnXCI6IHtcbiAgICBcImV4dGVuZHNcIjogW1xuICAgICAgXCJwbHVnaW46c3Rvcnlib29rL3JlY29tbWVuZGVkXCJcbiAgICBdXG4gIH0sXG4gIFwiZGVwZW5kZW5jaWVzXCI6IHtcbiAgICBcIkByYWRpeC11aS9yZWFjdC1kaWFsb2dcIjogXCJeMS4wLjVcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC1ob3Zlci1jYXJkXCI6IFwiXjEuMC43XCIsXG4gICAgXCJAcmFkaXgtdWkvcmVhY3QtcG9wb3ZlclwiOiBcIl4xLjEuMlwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNlbGVjdFwiOiBcIl4yLjAuMFwiLFxuICAgIFwiQHJhZGl4LXVpL3JlYWN0LXNsb3RcIjogXCJeMS4wLjJcIixcbiAgICBcIkByYWRpeC11aS9yZWFjdC10YWJzXCI6IFwiXjEuMS4xXCIsXG4gICAgXCJjbGFzcy12YXJpYW5jZS1hdXRob3JpdHlcIjogXCJeMC43LjBcIixcbiAgICBcImNsc3hcIjogXCJeMi4xLjFcIixcbiAgICBcImZyYW1lci1tb3Rpb25cIjogXCJeMTEuMTEuMTdcIixcbiAgICBcImx1Y2lkZS1yZWFjdFwiOiBcIl4wLjQ2MC4wXCIsXG4gICAgXCJwZGYtbGliXCI6IFwiXjEuMTcuMVwiLFxuICAgIFwicmVhY3QtZHJvcHpvbmVcIjogXCJeMTQuMy41XCIsXG4gICAgXCJyZWFjdC1ob29rLWZvcm1cIjogXCJeNy41My4yXCIsXG4gICAgXCJyZWFjdC1pY29uc1wiOiBcIl41LjMuMFwiLFxuICAgIFwicmVhY3QtcGRmXCI6IFwiXjkuMS4xXCIsXG4gICAgXCJ0YWlsd2luZC1tZXJnZVwiOiBcIl4yLjUuNFwiLFxuICAgIFwidGFpbHdpbmRjc3MtYW5pbWF0ZVwiOiBcIl4xLjAuN1wiLFxuICAgIFwiem9kXCI6IFwiXjMuMjMuOFwiXG4gIH1cbn1cbiJdLAogICJtYXBwaW5ncyI6ICI7QUFBa1UsU0FBUyxvQkFBNEI7QUFDdlcsT0FBTyxXQUFXOzs7QUNBaEIsV0FBUTtBQThCUix1QkFBb0I7QUFBQSxFQUNsQixPQUFTO0FBQUEsRUFDVCxhQUFhO0FBQ2Y7OztBRDlCRixPQUFPLFVBQVU7QUFDakIsT0FBTyxTQUFTO0FBTGhCLElBQU0sbUNBQW1DO0FBTXpDLFNBQVMsdUJBQStCO0FBQ3RDLFNBQU87QUFBQSxJQUNMLE1BQU07QUFBQSxJQUNOLGVBQWUsU0FBUyxRQUFRO0FBQzlCLGlCQUFXLENBQUMsVUFBVSxZQUFZLEtBQUssT0FBTyxRQUFRLE1BQU0sR0FBRztBQUM3RCxZQUFJLENBQUMsU0FBUyxTQUFTLFlBQVksS0FBSyxhQUFhLFNBQVMsU0FBUztBQUNyRTtBQUFBLFFBQ0Y7QUFDQSxjQUFNLFVBQVUsT0FBTztBQUFBLFVBQ3JCO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQSxVQVdBO0FBQUEsUUFDRjtBQUNBLGNBQU0sZUFBZSxPQUFPLFNBQVMsYUFBYSxNQUFNLElBQ3BELGFBQWEsU0FDYixPQUFPLEtBQUssYUFBYSxNQUFNO0FBQ25DLHFCQUFhLFNBQVMsT0FBTyxPQUFPLENBQUMsU0FBUyxZQUFZLENBQUM7QUFBQSxNQUM3RDtBQUFBLElBQ0Y7QUFBQSxFQUNGO0FBQ0Y7QUFHQSxJQUFPLHNCQUFRLGFBQWE7QUFBQSxFQUMxQixTQUFTO0FBQUEsSUFDUCxNQUFNO0FBQUEsSUFDTixxQkFBcUI7QUFBQSxJQUNyQixJQUFJO0FBQUEsTUFDRixhQUFhO0FBQUEsTUFDYixjQUFjO0FBQUEsTUFDZCxTQUFTLENBQUMsbUJBQW1CLGNBQWM7QUFBQSxJQUM3QyxDQUFDO0FBQUEsRUFDSDtBQUFBLEVBQ0EsY0FBYztBQUFBLElBQ1osU0FBUyxDQUFDLGNBQWM7QUFBQSxFQUMxQjtBQUFBLEVBQ0EsU0FBUztBQUFBLElBQ1AsT0FBTztBQUFBLE1BQ0wsS0FBSyxLQUFLLFFBQVEsa0NBQVcsT0FBTztBQUFBLElBQ3RDO0FBQUEsRUFDRjtBQUFBLEVBQ0EsT0FBTztBQUFBLElBQ0wsV0FBVztBQUFBLElBQ1gsYUFBYTtBQUFBLElBQ2IsS0FBSztBQUFBLE1BQ0gsT0FBTztBQUFBLE1BQ1A7QUFBQSxNQUNBLFVBQVUsQ0FBQyxXQUFXLFNBQVMsTUFBTTtBQUFBLE1BQ3JDLFNBQVMsQ0FBQyxNQUFNLE9BQU8sS0FBSztBQUFBLElBQzlCO0FBQUEsSUFDQSxlQUFlO0FBQUEsTUFDYixVQUFVLE9BQU8sS0FBSyxnQkFBZ0I7QUFBQSxNQUN0QyxRQUFRLEVBQUUsU0FBUyxFQUFFLE9BQU8sU0FBUyxhQUFhLFdBQVcsRUFBRTtBQUFBLElBQ2pFO0FBQUEsRUFDRjtBQUNGLENBQUM7IiwKICAibmFtZXMiOiBbXQp9Cg==
