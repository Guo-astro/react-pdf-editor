// vite.config.ts
import { defineConfig } from "file:///Users/guo/OSS/japanese-ebma-receipt-transformer/node_modules/.pnpm/vite@5.4.11_@types+node@22.9.1/node_modules/vite/dist/node/index.js";
import react from "file:///Users/guo/OSS/japanese-ebma-receipt-transformer/node_modules/.pnpm/@vitejs+plugin-react@4.3.3_vite@5.4.11_@types+node@22.9.1_/node_modules/@vitejs/plugin-react/dist/index.mjs";

// package.json
var name = "react-pdf-transformer";
var peerDependencies = {
  react: "^18.3.1",
  "react-dom": "^18.3.1"
};

// vite.config.ts
import path from "path";
import dts from "file:///Users/guo/OSS/japanese-ebma-receipt-transformer/node_modules/.pnpm/vite-plugin-dts@4.3.0_@types+node@22.9.1_rollup@4.27.3_typescript@5.6.3_vite@5.4.11_@types+node@22.9.1_/node_modules/vite-plugin-dts/dist/index.mjs";
var __vite_injected_original_dirname = "/Users/guo/OSS/japanese-ebma-receipt-transformer";
function transformPdfJsWorker() {
  return {
    name: "transform-pdf-js-worker",
    generateBundle(options, bundle) {
      for (const [fileName, chunkOrAsset] of Object.entries(bundle)) {
        if (!fileName.includes("pdf.worker") || chunkOrAsset.type !== "asset") {
          continue;
        }
        const prepend = Buffer.from(
          `if (typeof Promise.withResolvers === "undefined") {
            Promise.withResolvers = function () {
              let resolve, reject
              const promise = new Promise((res, rej) => {
                resolve = res
                reject = rej
              })
              return { promise, resolve, reject }
            }
          }
          `,
          "utf-8"
        );
        const sourceBuffer = Buffer.isBuffer(chunkOrAsset.source) ? chunkOrAsset.source : Buffer.from(chunkOrAsset.source);
        chunkOrAsset.source = Buffer.concat([prepend, sourceBuffer]);
      }
    }
  };
}
var vite_config_default = defineConfig({
  plugins: [
    react(),
    dts({
      rollupTypes: true,
      tsconfigPath: "./tsconfig.app.json",
      exclude: ["**/*.stories.ts", "**/*.test.ts"]
    })
  ],
  optimizeDeps: {
    exclude: ["lucide-react"]
  },
  resolve: {
    alias: {
      "@": path.resolve(__vite_injected_original_dirname, "./src")
    }
  },
  build: {
    sourcemap: true,
    emptyOutDir: true,
    lib: {
      entry: "./src/index.ts",
      name,
      fileName: (format) => `index.${format}.js`,
      formats: ["es", "cjs", "umd"]
    },
    rollupOptions: {
      plugins: [transformPdfJsWorker()],
      external: Object.keys(peerDependencies),
      output: { globals: { react: "React", "react-dom": "ReactDOM" } }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
